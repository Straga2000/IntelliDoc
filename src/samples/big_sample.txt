from flask import Blueprint, render_template, session, request, redirect, url_for\nviews = Blueprint(\'views\', __name__)\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom flask_socketio import SocketIO, send\nfrom .__init__ import User, Workspace,db, Channel,Chats\nimport cloudinary as Cloud\nfrom cloudinary import uploader\nfrom cloudinary.utils import cloudinary_url\n\n# Add your cloudinary credentials here!\nCloud.config( \n  cloud_name = "", \n  api_key = "", \n  api_secret = "" \n)\n\n@views.route(\'/\')\ndef landing_page():\n    return render_template("/views/landingPage.html")\n\n@views.route(\'/authorization\')\ndef main_page():\n    return render_template("/auth/login-register.html")\n\n@views.route(\'/imageUploadChat\', methods=[\'POST\'])\n@login_required\ndef uploadImage():\n    image = request.files[\'image\']\n    print("hello image here")\n    if image:\n        upload_result = uploader.upload(image)\n        # image = Cloud.CloudinaryImage(request.form.get(\'image\'))\n        thumbnail_url1, options = cloudinary_url(\n                    upload_result[\'public_id\'],\n                    crop="fill",)\n        print(thumbnail_url1)\n        c = Chats()\n        c.message = thumbnail_url1\n        c.username = request.form.get(\'imageusername\')\n        c.wid = request.form.get(\'imagewid\')\n        c.channel_id = request.form.get(\'imagecid\')\n        c.image = 1\n        room = Workspace.query.filter_by(id = request.form.get(\'imagewid\')).first()\n        session[\'name\'] = room.name\n        if c.message and c.username and c.wid and c.channel_id:\n            db.session.add(c)\n            db.session.commit()\n            if Chats.query.filter_by(message = thumbnail_url1).count() == 1:\n                image = Chats.query.filter_by(message = thumbnail_url1).first()\n                session[\'imageid\'] = image.id\n    return redirect(url_for(\'views.chat\'))\n\n\n@views.route(\'/chat\')\n@login_required\ndef chat():\n    Workspaces = []\n    ChannelCount = 0\n    count = 0\n    if session.get("USERNAME") is None:\n        username = current_user.name\n    else:\n        username = session[\'username\']\n    user = User.query.filter_by(name = username).first()\n    if user.workspace_list:\n        wlist = user.workspace_list.split()\n        wlist = [int(i) for i in wlist]\n        count = len(wlist)\n        for w in wlist:\n            Workspaces.append(Workspace.query.filter_by(id = w).first())\n    print(username)\n    chatscount = 0\n    if len(Workspaces) > 0:\n        Channels = Channel.query.filter_by(wid = Workspaces[0].id).all()\n        print(Workspaces[0].id)\n        ChannelCount = Channel.query.filter_by(wid = Workspaces[0].id).count()\n        print(Channels)\n        if ChannelCount > 0:\n            chats = Chats.query.filter_by(wid = Workspaces[0].id, channel_id = Channels[0].id).all()\n            chatscount = len(chats)\n            if chatscount and chatscount > 0:\n                print(chatscount, "chatscount")\n                return render_template(\'/views/base.html\', workspace = Workspaces, count = count, channels = Channels, channelCount = ChannelCount,username = username, chats= chats, chatscount = chatscount, image = user.image)\n        return render_template(\'/views/base.html\', workspace = Workspaces, count = count, channels = Channels, channelCount = ChannelCount,username = username, chatscount = chatscount, image = user.image)\n    return render_template(\'/views/base.html\', workspace = Workspaces, count = count, channelCount = ChannelCount, username = username, chatscount = chatscount, image = user.image)\n